"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VenariAI = exports.SDKConfiguration = exports.ServerList = void 0;
var components = __importStar(require("../models/components"));
var catalog_1 = require("./catalog");
var inference_1 = require("./inference");
var search_1 = require("./search");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.venari.ai"];
var SDKConfiguration = /** @class */ (function () {
    function SDKConfiguration(init) {
        this.language = "typescript";
        this.openapiDocVersion = "1.0.0";
        this.sdkVersion = "0.0.1";
        this.genVersion = "2.237.3";
        this.userAgent = "speakeasy-sdk/typescript 0.0.1 2.237.3 1.0.0 venari-ai";
        Object.assign(this, init);
    }
    return SDKConfiguration;
}());
exports.SDKConfiguration = SDKConfiguration;
/**
 * Venari AI Sneaker Inference API: The Venari AI Sneaker Inference API allows you to submit images, either as single requests or in batches, and receive inference results specifying which sneaker is present in the picture. The API also supports asynchronous requests using webhooks for improved flexibility and responsiveness.
 *
 * @remarks
 *
 * ## Base URL
 *
 * The base URL for accessing the Venari AI Sneaker Inference API is `https://api.venari.ai/`.
 *
 * ## Authentication
 *
 * To use the API, you need to include an API key in the request headers:
 *
 * ```plaintext
 * X-Api-Key: YOUR_API_KEY
 * ```
 */
var VenariAI = /** @class */ (function () {
    function VenariAI(props) {
        var _a, _b;
        var serverURL = props === null || props === void 0 ? void 0 : props.serverURL;
        var serverIdx = (_a = props === null || props === void 0 ? void 0 : props.serverIdx) !== null && _a !== void 0 ? _a : 0;
        if (!serverURL) {
            serverURL = exports.ServerList[serverIdx];
        }
        var defaultClient = (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new components.Security({ apiKey: props === null || props === void 0 ? void 0 : props.apiKey }),
            serverURL: serverURL,
            retryConfig: props === null || props === void 0 ? void 0 : props.retryConfig,
        });
        this.inference = new inference_1.Inference(this.sdkConfiguration);
        this.search = new search_1.Search(this.sdkConfiguration);
        this.catalog = new catalog_1.Catalog(this.sdkConfiguration);
    }
    return VenariAI;
}());
exports.VenariAI = VenariAI;
